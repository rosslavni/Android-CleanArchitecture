apply plugin: 'com.android.application'

android {
  def globalConfiguration = rootProject.extensions.getByName("ext")

  compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
  buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

  defaultConfig {
    minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
    targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
    applicationId globalConfiguration.getAt("androidApplicationId")
    versionCode globalConfiguration.getAt("androidVersionCode")
    versionName globalConfiguration.getAt("androidVersionName")
    testInstrumentationRunner globalConfiguration.getAt("androidTestInstrumentationRunner")
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
  }

  lintOptions {
    abortOnError false;
    disable 'InvalidPackage' // Some libraries have issues with this.
    disable 'OldTargetApi' // Lint gives this warning but SDK 20 would be Android L Beta.
    disable 'IconDensities' // For testing purpose. This is safe to remove.
  }

  buildTypes {
    release {
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  def domainLayer = project(':domain')
  def dataLayer = project(':data')

  //project dependencies
  compile domainLayer
  compile dataLayer

  //library dependencies
  compile 'com.jakewharton:butterknife:6.0.0'
  compile 'com.android.support:recyclerview-v7:21.0.+'

  //compile this only for testing. I had to use a workaround for using Espresso (it is not in the
  //maven central repository): since both Mockito and Espresso use 'hamcrest' I had to remove them
  //on the mockito library: "zip -d mockito.jar org/hamcrest/*"
  androidTestCompile fileTree(dir: 'testLibs', include: '*.jar')
}
